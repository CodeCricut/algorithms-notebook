{"version":3,"sources":["webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://gatsby-minimal-simple-blog/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://gatsby-minimal-simple-blog/./src/components/Bio/Bio.js","webpack://gatsby-minimal-simple-blog/./src/components/PostEntry/PostEntry.js","webpack://gatsby-minimal-simple-blog/./src/components/Seo/Seo.js","webpack://gatsby-minimal-simple-blog/./src/components/Pagination/Pagination.js","webpack://gatsby-minimal-simple-blog/./src/templates/blog-index.js","webpack://gatsby-minimal-simple-blog/./src/utils/helpers.js"],"names":["module","exports","arr","len","length","i","arr2","Array","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","href","twitter","summary","PostEntry","slug","title","date","timeToRead","excerpt","itemScope","itemType","Link","to","itemProp","formatReadingTime","dangerouslySetInnerHTML","__html","defaultProps","Seo","description","lang","meta","metaDescription","defaultTitle","Helmet","htmlAttributes","titleTemplate","content","property","concat","Pagination","currentPage","totalPageNumber","befMark","nextMark","map","_","ind","pageNum","key","BlogIndex","pageContext","location","numPages","siteTitle","posts","allMarkdownRemark","nodes","useLang","Layout","Bio","style","listStyle","margin","post","frontmatter","fields","readingTime","minutes","roundedMinutes","Math","round","cups","E","fill","join","formatPostDate","Date","toLocaleDateString","args","day","month","year","filter","Boolean","haveSameItem","arr1","s","Set","getPreviousNextNode","fromInd","previous","next","node","kebabCase","isAlphabetNum","match","x","toLowerCase","replace"],"mappings":"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","file":"component---src-templates-blog-index-js-f1a0a2180074a07f598e.js","sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\r\n        src=\"../../images/profile-pic.jpeg\"\r\n        width={80}\r\n        height={80}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Personal blog by  {` `}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            {author.name}\r\n          </a>\r\n          <br />\r\n          {author?.summary || null}\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'gatsby';\r\n\r\nimport { formatReadingTime } from '../../utils/helpers';\r\n\r\nfunction PostEntry({ slug, title, date, timeToRead, excerpt }) {\r\n  return (\r\n    <article\r\n      className=\"post-list-item\"\r\n      itemScope\r\n      itemType=\"http://schema.org/Article\"\r\n    >\r\n      <header>\r\n        <h2>\r\n          <Link to={slug} itemProp=\"url\">\r\n            <span itemProp=\"headline\">{title}</span>\r\n          </Link>\r\n        </h2>\r\n        <small>{date} • {formatReadingTime(timeToRead)}</small>\r\n      </header>\r\n      <section>\r\n        <p\r\n          dangerouslySetInnerHTML={{\r\n            __html: excerpt,\r\n          }}\r\n          itemProp=\"description\"\r\n        />\r\n      </section>\r\n    </article>\r\n  );\r\n}\r\n\r\nPostEntry.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  date: PropTypes.string.isRequired,\r\n  timeToRead: PropTypes.number.isRequired,\r\n  excerpt: PropTypes.string,\r\n};\r\n\r\nPostEntry.defaultProps = {\r\n  title: null,\r\n  excerpt: null,\r\n};\r\n\r\nexport default PostEntry;\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSeo.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSeo.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Seo\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'gatsby';\r\n\r\nimport './Pagination.css';\r\n\r\nconst Pagination = ({ currentPage, totalPageNumber }) => {\r\n  const befMark =\r\n    currentPage === 1 ? (\r\n      <span className=\"disabled\">&laquo;</span>\r\n    ) : (\r\n      <Link to={`/${currentPage - 1}`}>&laquo;</Link>\r\n    );\r\n  const nextMark =\r\n    currentPage === totalPageNumber ? (\r\n      <span className=\"disabled\">&raquo;</span>\r\n    ) : (\r\n      <Link to={`/${currentPage + 1}`}>&raquo;</Link>\r\n    );\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      {befMark}\r\n      {Array.from({ length: totalPageNumber })\r\n        .map((_, ind) => ind + 1)\r\n        .map((pageNum) => {\r\n          return pageNum === currentPage ? (\r\n            <span key={`pageNum-${pageNum}`} className=\"active\">\r\n              {pageNum}\r\n            </span>\r\n          ) : (\r\n            <Link key={`pageNum-${pageNum}`} to={`/${pageNum}`}>\r\n              {pageNum}\r\n            </Link>\r\n          );\r\n        })}\r\n      {nextMark}\r\n    </div>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  currentPage: PropTypes.number,\r\n  totalPageNumber: PropTypes.number,\r\n};\r\n\r\nPagination.defaultProps = {\r\n  currentPage: 1,\r\n  totalPageNumber: 1,\r\n};\r\n\r\nexport default Pagination;\r\n","import * as React from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Bio from \"components/Bio\"\r\nimport Layout from \"components/Layout\"\r\nimport Seo from \"components/Seo\"\r\nimport Pagination from 'components/Pagination';\r\nimport PostEntry from 'components/PostEntry';\r\n\r\nimport { useLang } from 'context/LanguageContext';\r\n\r\nconst BlogIndex = ({ pageContext, data, location }) => {\r\n  const { currentPage, numPages } = pageContext;\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const posts = data.allMarkdownRemark.nodes\r\n\r\n  const { lang } = useLang();\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <Seo title=\"All posts\" />\r\n        <Bio />\r\n        <p>\r\n          No blog posts found.\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title=\"All posts\" />\r\n      <Bio />\r\n      <ol style={{ listStyle: `none`, margin: 0 }}>\r\n        {posts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <PostEntry\r\n                lang={lang}\r\n                key={post.fields.slug}\r\n                slug={post.fields.slug}\r\n                date={post.frontmatter.date}\r\n                timeToRead={post.fields.readingTime.minutes}\r\n                title={title}\r\n                excerpt={post.frontmatter.description || post.excerpt}\r\n              />              \r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n      {numPages > 1 &&\r\n        <Pagination currentPage={currentPage} totalPageNumber={numPages} />\r\n      }\r\n    </Layout>\r\n  )\r\n}\r\n\r\nBlogIndex.propTypes = {\r\n  pageContext: PropTypes.object.isRequired,\r\n  data: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired,\r\n};\r\n\r\nBlogIndex.defaultProps = {};\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query($langKey: String!, $skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      filter: { fields: { langKey: { eq: $langKey }, draft: { eq: false } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n          langKey\r\n          readingTime {\r\n            minutes\r\n          }          \r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n          tags\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","function formatReadingTime(minutes) {\r\n  const roundedMinutes = Math.round(minutes)\r\n  const cups = Math.round(minutes / 5);\r\n  if (cups > 5) {\r\n    return `${new Array(Math.round(cups / Math.E)).fill('🍱').join('')} ${roundedMinutes} min read`;\r\n  }\r\n  return `${new Array(cups || 1).fill('☕️').join('')} ${roundedMinutes} min read`;\r\n}\r\n\r\n// `lang` is optional and will default to the current user agent locale\r\nfunction formatPostDate(date, lang) {\r\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\r\n    return date;\r\n  }\r\n\r\n  date = new Date(date);\r\n  const args = [lang, { day: 'numeric', month: 'long', year: 'numeric' }].filter(Boolean);\r\n  return date.toLocaleDateString(...args);\r\n}\r\n\r\nfunction haveSameItem(arr1 = [], arr2 = []) {\r\n  if (arr1 == null || arr2 == null) {\r\n    // false for no tags\r\n    return false;\r\n  }\r\n  const s = new Set([...arr1, ...arr2]);\r\n  const uniques = [...s];\r\n\r\n  return uniques.length < arr1.length + arr2.length;\r\n}\r\n\r\nfunction getPreviousNextNode(posts, fromInd) {\r\n  let previous;\r\n  let next;\r\n  if (posts.length > 0 && fromInd > -1) {\r\n    previous = fromInd <= 0 ? null : posts[fromInd - 1].node;\r\n    next = fromInd === posts.length - 1 ? null : posts[fromInd + 1].node;\r\n  }\r\n\r\n  return {\r\n    previous,\r\n    next,\r\n  };\r\n}\r\n\r\nconst isAlphabetNum = s =>\r\n  /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g.test(s);\r\n\r\nfunction kebabCase(s) {\r\n  if (isAlphabetNum(s)) {\r\n    return s\r\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\r\n      .map(x => x.toLowerCase())\r\n      .join('-');\r\n  }\r\n\r\n  return s\r\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\r\n    .replace(/[\\s_]+/g, '-')\r\n    .toLowerCase();\r\n}\r\n\r\nmodule.exports = {\r\n  formatReadingTime,\r\n  formatPostDate,\r\n  haveSameItem,\r\n  getPreviousNextNode,\r\n  kebabCase,\r\n};\r\n"],"sourceRoot":""}